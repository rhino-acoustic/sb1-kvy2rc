[["/home/project/src/components/ResultModal.tsx","import React, { useRef, useState, useEffect } from 'react';\nimport { X } from 'lucide-react';\nimport { saveElementAsImage } from '../utils/saveImage';\n\ninterface ResultModalProps {\n  result: string;\n  percentage: number;\n  mileage: string;\n  topPercentage: number;\n  userImage: string;\n  congratsMessage: string;\n  onClose: () => void;\n}\n\nexport const ResultModal: React.FC<ResultModalProps> = ({\n  result,\n  percentage,\n  mileage,\n  topPercentage,\n  userImage,\n  congratsMessage,\n  onClose,\n}) => {\n  const modalRef = useRef<HTMLDivElement>(null);\n  const [logoError, setLogoError] = useState(false);\n  const [imageAspectRatio, setImageAspectRatio] = useState(1);\n\n  useEffect(() => {\n    const img = new Image();\n    img.onload = () => {\n      setImageAspectRatio(img.width / img.height);\n    };\n    img.src = userImage;\n  }, [userImage]);\n\n  const handleCopyLink = () => {\n    const currentUrl = window.location.href;\n    navigator.clipboard.writeText(currentUrl).then(\n      () => {\n        alert('링크가 클립보드에 복사되었습니다.');\n      },\n      (err) => {\n        console.error('링크 복사 실패:', err);\n      }\n    );\n  };\n\n  const handleSaveResult = () => {\n    if (modalRef.current) {\n      try {\n        saveElementAsImage(modalRef.current, '이봉주_계산기_결과.png');\n      } catch (error) {\n        console.error('이미지 저장 중 오류 발생:', error);\n        alert('이미지 저장에 실패했습니다. 다시 시도해 주세요.');\n      }\n    }\n  };\n\n  // 결과 문자열 파싱 (이전과 동일)\n  const bongjuMatch = result.match(/(\\d+(\\.\\d+)?)봉주/);\n  const bongjuValue = bongjuMatch ? bongjuMatch[1] : '';\n  const distanceMatch = result.match(/(\\d+)km/);\n  const distanceValue = distanceMatch ? distanceMatch[1] : '';\n  const percentageMatch = result.match(/(\\d+(\\.\\d+)?)%/);\n  const percentageValue = percentageMatch ? percentageMatch[1] : '';\n  const periodMatch = result.match(/(하루|주간|월간)/);\n  const periodValue = periodMatch ? periodMatch[1] : '하루';\n\n  return (\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\">\n      <div\n        ref={modalRef}\n        className=\"bg-white p-6 rounded-lg shadow-xl max-w-sm w-full relative\"\n      >\n        <button\n          onClick={onClose}\n          className=\"absolute top-2 right-2 text-gray-500 hover:text-gray-700\"\n        >\n          <X size={24} />\n        </button>\n        <div className=\"text-center\">\n          {logoError ? (\n            <div className=\"w-32 h-12 mx-auto mb-4 flex items-center justify-center bg-green-600 text-white font-bold rounded\">\n              베가베리\n            </div>\n          ) : (\n            <img\n              src=\"https://vegavery.com/web/upload/category/logo/8c6d2a4c1a0c1a5f1a1a2e3f2f1c1a0c.png\"\n              alt=\"베가베리 로고\"\n              className=\"w-32 h-auto mx-auto mb-4 object-contain\"\n              onError={() => setLogoError(true)}\n            />\n          )}\n          <div \n            className=\"w-full mb-4 overflow-hidden\" \n            style={{ aspectRatio: imageAspectRatio }}\n          >\n            <img\n              src={userImage}\n              alt=\"User uploaded image or level image\"\n              className=\"w-full h-full object-cover\"\n            />\n          </div>\n          <p className=\"text-lg font-semibold text-green-600 mb-2 whitespace-pre-line\">\n            {congratsMessage}\n          </p>\n          <p className=\"text-2xl font-bold text-green-600 mb-2\">\n            당신은 {bongjuValue}봉주입니다!\n          </p>\n          <p className=\"text-lg text-gray-700 mb-2\">\n            ({periodValue} {distanceValue}km 이봉주 선수 훈련량의{' '}\n            {percentageValue}%)\n          </p>\n          <p className=\"text-sm text-gray-500 whitespace-pre-line\">{mileage}</p>\n        </div>\n        <div className=\"mt-6 flex justify-between\">\n          <button\n            onClick={handleCopyLink}\n            className=\"relative w-[48%] h-12 bg-transparent\"\n            aria-label=\"공유하기\"\n          >\n            <img\n              src=\"/path/to/share-button-image.png\"\n              alt=\"공유하기\"\n              className=\"absolute inset-0 w-full h-full object-contain\"\n            />\n          </button>\n          <button\n            onClick={handleSaveResult}\n            className=\"relative w-[48%] h-12 bg-transparent\"\n            aria-label=\"저장하기\"\n          >\n            <img\n              src=\"/path/to/save-button-image.png\"\n              alt=\"저장하기\"\n              className=\"absolute inset-0 w-full h-full object-contain\"\n            />\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};"],["/home/project/src/utils/saveImage.tsx","import html2canvas from 'html2canvas';\n\nexport const saveElementAsImage = async (element: HTMLElement, fileName: string) => {\n  try {\n    const canvas = await html2canvas(element, {\n      useCORS: true,\n      allowTaint: true,\n      scrollY: -window.scrollY,\n      scale: 2, // 적당한 해상도를 위해 2배로 설정\n    });\n    const processedCanvas = processCanvas(canvas);\n    const image = processedCanvas.toDataURL('image/png', 1.0);\n    \n    const link = document.createElement('a');\n    link.download = fileName;\n    link.href = image;\n    link.click();\n  } catch (error) {\n    console.error('Error saving image:', error);\n  }\n};\n\nconst processCanvas = (originalCanvas: HTMLCanvasElement): HTMLCanvasElement => {\n  const targetWidth = 400;\n  const targetHeight = Math.round(originalCanvas.height * (targetWidth / originalCanvas.width));\n  \n  const processedCanvas = document.createElement('canvas');\n  processedCanvas.width = targetWidth;\n  processedCanvas.height = targetHeight;\n  const ctx = processedCanvas.getContext('2d');\n  \n  if (ctx) {\n    // 배경을 흰색으로 채우기\n    ctx.fillStyle = 'white';\n    ctx.fillRect(0, 0, targetWidth, targetHeight);\n    \n    // 원본 캔버스를 새 캔버스에 그리기\n    ctx.drawImage(originalCanvas, 0, 0, targetWidth, targetHeight);\n    \n    // 캔버스 테두리에 얇은 선 추가\n    ctx.strokeStyle = '#e2e8f0'; // 연한 회색\n    ctx.lineWidth = 2;\n    ctx.strokeRect(0, 0, targetWidth, targetHeight);\n  }\n  \n  return processedCanvas;\n};"]]